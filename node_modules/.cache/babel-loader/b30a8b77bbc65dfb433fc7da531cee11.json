{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bong\\\\Documents\\\\Projects\\\\ReactJS\\\\Portfolio\\\\portfolio-react-cp\\\\src\\\\containers\\\\projects\\\\Projects.js\";\nimport React, { useState, useEffect, useContext, Suspense, lazy } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport Button from \"../../components/button/Button\";\nimport { openSource, socialMediaLinks } from \"../../portfolio\";\nimport StyleContext from \"../../contexts/StyleContext\";\nimport Loading from \"../../containers/loading/Loading\";\nexport default function Projects() {\n  const GithubRepoCard = lazy(() => import(\"../../components/githubRepoCard/GithubRepoCard\"));\n\n  const FailedLoading = () => null;\n\n  const renderLoader = () => /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 30\n    }\n  });\n\n  const [repo, setrepo] = useState([]); // todo: remove useContex because is not supported\n\n  const {\n    isDark\n  } = useContext(StyleContext);\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${openSource.githubConvertedToken}`\n          }\n        });\n      }\n    });\n    client.query({\n      query: gql`\n        {\n        user(login: \"${openSource.githubUserName}\") {\n          pinnedItems(first: 6, types: [REPOSITORY]) {\n            totalCount\n            edges {\n              node {\n                ... on Repository {\n                  name\n                  description\n                  forkCount\n                  stargazers {\n                    totalCount\n                  }\n                  url\n                  id\n                  diskUsage\n                  primaryLanguage {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n        `\n    }).then(result => {\n      setrepoFunction(result.data.user.pinnedItems.edges);\n      console.log(result);\n    }).catch(function (error) {\n      console.log(error);\n      setrepoFunction(\"Error\");\n      console.log(\"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\");\n    });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n\n  if (!(typeof repo === \"string\" || repo instanceof String) && openSource.display) {\n    return /*#__PURE__*/React.createElement(Suspense, {\n      fallback: renderLoader(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main\",\n      id: \"opensource\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"project-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, \"Open Source Projects\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repo-cards-div-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, repo.map((v, i) => {\n      return /*#__PURE__*/React.createElement(GithubRepoCard, {\n        repo: v,\n        key: v.node.id,\n        isDark: isDark,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      });\n    })), /*#__PURE__*/React.createElement(Button, {\n      text: \"More Projects\",\n      className: \"project-button\",\n      href: socialMediaLinks.github,\n      newTab: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    })));\n  } else {\n    return /*#__PURE__*/React.createElement(FailedLoading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 12\n      }\n    });\n  }\n}","map":{"version":3,"sources":["D:/Bong/Documents/Projects/ReactJS/Portfolio/portfolio-react-cp/src/containers/projects/Projects.js"],"names":["React","useState","useEffect","useContext","Suspense","lazy","ApolloClient","gql","Button","openSource","socialMediaLinks","StyleContext","Loading","Projects","GithubRepoCard","FailedLoading","renderLoader","repo","setrepo","isDark","getRepoData","client","uri","request","operation","setContext","headers","authorization","githubConvertedToken","query","githubUserName","then","result","setrepoFunction","data","user","pinnedItems","edges","console","log","catch","error","array","String","display","map","v","i","node","id","github"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext, Suspense, lazy} from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport {gql} from \"apollo-boost\";\r\nimport \"./Project.css\";\r\nimport Button from \"../../components/button/Button\";\r\nimport {openSource, socialMediaLinks} from \"../../portfolio\";\r\nimport StyleContext from \"../../contexts/StyleContext\";\r\nimport Loading from \"../../containers/loading/Loading\";\r\nexport default function Projects() {\r\n  const GithubRepoCard = lazy(() =>\r\n    import(\"../../components/githubRepoCard/GithubRepoCard\")\r\n  );\r\n  const FailedLoading = () => null;\r\n  const renderLoader = () => <Loading />;\r\n  const [repo, setrepo] = useState([]);\r\n  // todo: remove useContex because is not supported\r\n  const {isDark} = useContext(StyleContext);\r\n  useEffect(() => {\r\n    getRepoData();\r\n  }, []);\r\n\r\n  function getRepoData() {\r\n    const client = new ApolloClient({\r\n      uri: \"https://api.github.com/graphql\",\r\n      request: operation => {\r\n        operation.setContext({\r\n          headers: {\r\n            authorization: `Bearer ${openSource.githubConvertedToken}`\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    client\r\n      .query({\r\n        query: gql`\r\n        {\r\n        user(login: \"${openSource.githubUserName}\") {\r\n          pinnedItems(first: 6, types: [REPOSITORY]) {\r\n            totalCount\r\n            edges {\r\n              node {\r\n                ... on Repository {\r\n                  name\r\n                  description\r\n                  forkCount\r\n                  stargazers {\r\n                    totalCount\r\n                  }\r\n                  url\r\n                  id\r\n                  diskUsage\r\n                  primaryLanguage {\r\n                    name\r\n                    color\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n        `\r\n      })\r\n      .then(result => {\r\n        setrepoFunction(result.data.user.pinnedItems.edges);\r\n        console.log(result);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        setrepoFunction(\"Error\");\r\n        console.log(\r\n          \"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\"\r\n        );\r\n      });\r\n  }\r\n\r\n  function setrepoFunction(array) {\r\n    setrepo(array);\r\n  }\r\n  if (\r\n    !(typeof repo === \"string\" || repo instanceof String) &&\r\n    openSource.display\r\n  ) {\r\n    return (\r\n      <Suspense fallback={renderLoader()}>\r\n        <div className=\"main\" id=\"opensource\">\r\n          <h1 className=\"project-title\">Open Source Projects</h1>\r\n          <div className=\"repo-cards-div-main\">\r\n            {repo.map((v, i) => {\r\n              return (\r\n                <GithubRepoCard repo={v} key={v.node.id} isDark={isDark} />\r\n              );\r\n            })}\r\n          </div>\r\n          <Button\r\n            text={\"More Projects\"}\r\n            className=\"project-button\"\r\n            href={socialMediaLinks.github}\r\n            newTab={true}\r\n          />\r\n        </div>\r\n      </Suspense>\r\n    );\r\n  } else {\r\n    return <FailedLoading />;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}